// 4-to-1 multiplexer

module mul_dataflow(I0,I1,I2,I3,s1,s0,Y);
input I0,I1,I2,I3,s0,s1;
output Y;
wire w1,w2,w3,w4;
and(w1,I0,~s1,~s0);
and(w2,I1,~s1,s0);
and(w3,I2,s1,~s0);
and(w4,I3,s1,s0);
or(Y,w1,w2,w3,w4);
endmodule

module mul_behavioral(I0,I1,I2,I3,s1,s0,Y);
input I0,I1,I2,I3,s0,s1;
output reg Y;
always @(s1,s0)
    if(~s1 & ~s0) Y=I0;
    else if(~s1 & s0) Y=I1;
    else if(s1 & ~s0) Y=I2;
    else Y=I3;
endmodule

module main;
    reg I0,I1,I2,I3,s1,s0;
    wire Y;
    mul_dataflow m1(I0,I1,I2,I3,s1,s0,Y);
    //mul_behavioral m2(I0,I1,I2,I3,s1,s0,Y);
    initial
        begin
            I0=0;I1=1;I2=0;I3=1;s1=0;s0=0;
            #10 s1=0;s0=1;
            #10 s1=1;s0=0;
            #10 s1=1;s0=1;
        end
        
    initial
        $monitor("s1=%b s0=%b Y=%b time=%0d",s1,s0,Y,$time);
endmodule